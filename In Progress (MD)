//
// Created by Chew on 12/3/2019.
//

#ifndef BPLUSTREE_GROUP_PROJECT_NEWBTREENODE_H
#define BPLUSTREE_GROUP_PROJECT_NEWBTREENODE_H

#include <iostream>
#include <vector>
#include <cmath>
#include <queue>
#include <algorithm>

using namespace std;

class Bptree {
private:

    //degree of the tree
    int order;

    struct node {
        node *parent;
        vector<int> key;
        bool isleaf;
        int value;
        vector<node *> children;

        node() {
            parent = nullptr;
            isleaf = true;
        }

        node(node *p, int k, bool l) {
            parent = p;
            key.push_back(k);
            isleaf = true;
        }

        ~node() {};
    };


    node *root = nullptr;
    node *last_visited = nullptr;

public:
    Bptree(int o) {
        root = nullptr;
        order = o;
    }

    ~Bptree(){ //not implemented

    }

    node* search(int x) {
        node* v = root;
        int i;
        while (v) {
            for (i = 0; i < v->key.size() && x >= v->key[i]; i++){
                if (x == v->key[i] && v->isleaf) {
                    last_visited = v;
                    return v;
                }
            }
            last_visited = v;
            if(hasChildren(v)){
                v = v->children[i];
            }else{
                return nullptr;
            }
            i = 0;
        }
        return nullptr;
    }

    size_t findPos(vector<int> arr,int comp) {
        size_t i;
        for (i = 0; i < arr.size() && comp > arr[i]; i++) {}
        return i;
    }

    bool isFull(node* n) {
        return n->key.size() == this->order;
    }

    bool hasChildren(node* n) {
        return !n->children.empty();
    }

    template <typename T>
    void shiftRight(vector<T> v,size_t pos){
        T a;
        v.push_back(a);
        for(size_t i = v.size(); i > pos; i--){
            swap(v[i],v[i-1]);
        }
    }

    bool insert(int item) {
        if (root == nullptr) {
            root = new node();
            root->isleaf = false;
            root->key.push_back(item);
            last_visited = root;

        } else if (!hasChildren(root)) {
            size_t pos = findPos(root->key, item);

            shiftRight(root->key, pos);
            root->key.insert(root->key.begin() + pos, item);
        } else {
            node *y = search(item);
            if (y) {
                return false;
            }
            int i = findPos(last_visited->key, item);

            //make room for store item at position
            shiftRight(last_visited->key,i);

            //store the item
            last_visited->key.insert(last_visited->key.begin() + i, item);

            solveOverFlow(last_visited);
        }
    }

    int findPosDelete(vector<int> arr,int comp) {
        int i;
        for (i = 0; i < arr.size() && comp > arr[i]; i++) {}
        if(arr[i]!=comp){
            i = -1;
        }
        return i;
    }

    template <typename T>
    void shiftLeft(vector<T> v,int pos){
        int i;
        for(i = pos; i < v.size(); i++){
            swap(v[i],v[i+1]);
        }
    }

    bool remove(int item){
        if (!root) {
            return false;
        }else if(!hasChildren(root)){
            int pos = findPosDelete(root->key, item);
            if(pos==-1){
                return false;
            }
            shiftLeft(root->key, pos);
            root->key.pop_back();
        }else{
            node *y = search(item);
            if(!y){
                return false;
            }
            int i = findPosDelete(last_visited->key, item);
            shiftLeft(last_visited->key, i);
            last_visited->key.pop_back();
            if(last_visited->key.size()>order/2)
            // merge if necessary
        }
    }

    void solveOverFlow(node* ptr) {
        while (ptr && ptr->key.size() >= order) {
            size_t pivot = ptr->key.size() / 2;

            if(!ptr->isleaf){
                //create a right children
                node* rc = new node();

                //right part after the split
                for(size_t i = pivot; i < ptr->key.size(); i++){
                    rc->key.push_back(ptr->key[i]);
                }

                ptr->key.erase(ptr->key.begin()+pivot,ptr->key.end());

                if(hasChildren(ptr)){
                    for(size_t i = pivot; i < ptr->children.size(); i++){
                        rc->children.push_back(ptr->children[i]);
                    }

                    ptr->children.erase(ptr->children.begin()+pivot,ptr->children.end());
                }


                if(root == ptr){
                    node* temp = new node();
                    temp->isleaf = false;
                    rc->parent = temp;

                    //new root has the key that suppose to be pushed up
                    temp->key.push_back(rc->key[0]);


                    //store the children in new root
                    temp->children.push_back(ptr);
                    temp->children.push_back(rc);

                    this->root = temp;
                    ptr->parent = root;
                }else{
                    size_t pos = findPos(ptr->parent->key,ptr->key[pivot]);
                    shiftRight(ptr->parent->key,pos);

                    ptr->parent->key[pos] = ptr->key[pivot];
                    shiftRight(ptr->parent->children,pos+1);

                    ptr->parent->children[pos] = ptr;
                    ptr->parent->children[pos+1] = rc;
                    rc->parent = ptr->parent;


                }



            }else{

                size_t pos = findPos(ptr->parent->key, ptr->key[pivot]);

                shiftRight(ptr->parent->key,pos);
                ptr->parent->key[pos] = ptr->key[pivot];

                if(pos == 0){
                    node* left = new node();
                    left->isleaf = false;
                    for(size_t i = 0; i < pivot; i++){
                        left->key.push_back(ptr->key[i]);
                    }
                    left->parent = ptr->parent;
                    size_t i = pivot,j = 0;
                    for(i,j; i < ptr->key.size(); i++,j++){
                        ptr->key[j] = ptr->key[i];

                    }
                    ptr->key.erase(ptr->key.begin()+j,ptr->key.end());


                    shiftRight(ptr->parent->children,0);
                    ptr->parent->children[0] = left;

                }else{
                    node* right = new node();
                    right->isleaf = false;
                    for(size_t i = pivot; i < ptr->key.size(); i++){
                        right->key.push_back(ptr->key[i]);

                    }
                    ptr->key.erase(ptr->key.begin()+pivot,ptr->key.end());


                    shiftRight(ptr->parent->children,pos+1);
                    ptr->parent->children[pos+1] = right;



                }

            }

            ptr = ptr->parent;


        }
    }

    void levelOrder(ostream& os){
        queue<node *> queue;
        if(!root){
            os << "NULL" << endl;
            return;
        }
        queue.push(root);
        while(!queue.empty()){
            while(!queue.empty()){
                if(hasChildren(queue.front())){
                    for (auto i : queue.front()->children) {
                        queue.push(i);
                    }
                }
                for(int i = 0; i<queue.front()->key.size(); i++){
                    if(!queue.front()->isleaf && queue.front()!=root){
                        os << "K: ";
                    }
                    os << queue.front()->key[i] << " ";
                }
                queue.pop();
                os << "   ";
            }
            os << endl;
        }
    }
};




#endif //BPLUSTREE_GROUP_PROJECT_NEWBTREENODE_H
